---
title: R
editor: 
  markdown: 
    wrap: 72
---

## Learning R

I highly recommend subscribing to the [R Weekly
newsletter](https://rweekly.org/). This e-mail is sent every Monday and
is full of helpful tutorials about how to do stuff with R.

Searching for help with R on Google can sometimes be tricky because the
program name is a single letter. Google is generally smart enough to
figure out what you mean when you search for "r scatterplot", but if it
does struggle, try searching for "rstats" instead (e.g. "rstats
scatterplot").

If you use Twitter, post R-related questions and content with
[#rstats](https://twitter.com/search?q=%23rstats). The community there
is exceptionally generous and helpful. Also check out
[StackOverflow](https://stackoverflow.com/) (a Q&A site with hundreds of
thousands of answers to all sorts of programming questions) and [RStudio
Community](https://community.rstudio.com/) (a forum specifically
designed for people using RStudio and the tidyverse (i.e. you)).

These resources are also really really helpful:

-   [**R for Data Science**](https://r4ds.had.co.nz/): A free online
    book for learning the basics of R and the tidyverse.
-   [**R and RStudio cheat
    sheets**](https://www.rstudio.com/resources/cheatsheets/): A large
    collection of simple cheat sheets for RStudio, **ggplot2**, and
    other R-related things.
-   [**Stat 545**](http://stat545.com/): [Dr. Jenny
    Bryan](https://twitter.com/JennyBryan) at RStudio has an entire
    introductory course in R, visualization, and data analysis online.
-   [**STA 112FS: Data
    Science**](http://www2.stat.duke.edu/courses/Fall17/sta112.01/):
    [Dr. Mine Çetinkaya-Rundel](https://twitter.com/minebocek) at the
    University of Edinburgh / Duke University has an entire introductory
    course in R, visualization, and data science online.
-   [**CSE 631: Principles & Practice of Data
    Visualization**](http://cslu.ohsu.edu/~bedricks/courses/cs631/): Yet
    another introductory course for R and ggplot2 by [Dr. Alison
    Presmanes Hill](https://twitter.com/apreshill) at RStudio.

## R in the wild

A popular (and increasingly standard) way for sharing your analyses and
visualizations is to post an annotated explanation of your process
somewhere online. RStudio allows you to publish knitted HTML files
directly to [RPubs](http://rpubs.com/), but you can also post your
output to a blog or other type of website.[^1] Reading these kinds of
posts is one of the best ways to learn R, since they walk you through
each step of the process *and* show the code and output.

[^1]: If you want to be really fancy, you can use
    [blogdown](https://bookdown.org/yihui/blogdown/), which makes a
    complete website with R Markdown files. That's actually how this
    site is built ([see the source
    code](https://github.com/andrewheiss/datavizm20.classes.andrewheiss.com)).
    You can build your own site [with this
    tutorial](https://apreshill.rbind.io/post/up-and-running-with-blogdown/).

Here are some of the best examples I've come across:

-   [Text analysis of Trump's tweets confirms he writes only the
    (angrier) Android
    half](http://varianceexplained.org/r/trump-tweets/) (with a
    [follow-up](http://varianceexplained.org/r/trump-followup/))
-   [Bob Ross - Joy of
    Painting](https://rudeboybert.github.io/fivethirtyeight/articles/bob_ross.html)
-   [Bechdel analysis using the
    tidyverse](https://rudeboybert.github.io/fivethirtyeight/articles/bechdel.html):
    There are also a bunch of other examples [using data from
    FiveThirtyEight](https://rudeboybert.github.io/fivethirtyeight/articles/).
-   [Sexism on the Silver Screen: Exploring film's gender
    divide](http://rpubs.com/Jwhitman/Final_Project)
-   [Comparison of Quentin Tarantino Movies by Box Office and the
    Bechdel Test](http://soc301s2017.netlify.com/group_projects/group5)
-   [Who came to vote in Utah's
    caucuses?](https://juliasilge.com/blog/who-came-to-vote/)
-   [Health care indicators in Utah
    counties](https://juliasilge.com/blog/health-care-indicators/)
-   [Song lyrics across the United
    States](https://juliasilge.com/blog/song-lyrics-across/)
-   [A decade (ish) of listening to Sigur
    Rós](http://blog.karawoo.com/2016/09/22/A-decade-ish-of-listening-to-Sigur-Ros)
-   [When is Tom peeping these
    days?](http://rpubs.com/ry_lisa_elana/chicago): There are a also
    bunch of final projects from other R and data visualization classes
    [here](http://soc301s2017.netlify.com/group-projects/) and
    [here](https://rudeboybert.github.io/MATH116/PS/final_project/final_project_outline.html#past_examples).
-   [Mapping Fall
    Foliage](https://rud.is/b/2017/09/18/mapping-fall-foliage-with-sf/)
-   [General (Attys)
    Distributions](https://rud.is/b/2017/07/25/r%E2%81%B6-general-attys-distributions/)
-   [Disproving
    Approval](https://rud.is/b/2017/06/18/r%E2%81%B6-disproving-approval/)

# Errors, Warnings and Messages in R

These days we interact with computers mainly using graphical interfaces.
The most challenging thing about R is that it is different from our
everyday experience because it has a command-line interface. Thus,
precise formulation of commands is a key thing for making R work as you
want. In practice and especially at the very beginning, people make a
lot of small typos and big mistakes while learning a new programming
language. The good thing is that R is always there to let you know that
you made a certain mistake. The bad thing is that most of the time the
program simply indicates the presence of an error, but doesn't help to
solve it. This brings despair and anxiety. Our task is to learn how to
take the most from R notices to debug our code and keep calm.

R has three ways of communicating its concerns:

1.  Errors
2.  Warnings
3.  Messages

Error messages appear when the execution of a certain function is
terminated. R sees no possibility to continue with this input. There are
two main reasons for this: syntax errors and semantic errors. The most
intuitive examples of a syntax error are an unmatched parenthesis or a
brace, and spelling mistakes in the name of a function. Semantic errors
occur when the syntax of the code is correct, but it implies an
impossible action. Imagine you created a data frame which has 5 rows.
After that, you decided to add another column to this data frame.
However, you do not notice that it has 10 rows. Even if you correctly
asked R to attach this column, you would not see the result. Instead,
you would get an error: replacement has \[x\] rows, data has \[y\]. It
is important to understand that for us humans this action has more
sense: we could imagine a table with one column which is bigger than
others. For R this input sounds the same way as "how heavy is a red
color?" for you.

Warnings messages appear when R wants to warn you about the potential
problems with the results of the execution of some function. The
difference with errors is that in this case, you get a particular
result, but R suspects that you are going to be dissatisfied with it.
For example, imagine you created a vector of numbers and decided to
convert it into a numeric class. If numbers in your vector are written
properly, you will get a numeric vector. But if some of them do not,
what happens then? R would automatically replace non-properly written
numbers such as "1,000" or "2,500" with "NA". You made a syntax error
using a comma as a separator without letting R know. However, R would
not terminate the process of converting, but rather send a warning
message: "NA's introduced by coercion".It might be the case that it was
your plan from the very beginning, so you can ignore this message. If
not, use it as a sign that some debugging is needed here.

The last type is messages. They are mainly used to draw your attention
to some execution results which might be less intuitive. They are
designed by people who write functions and packages to make them more
usable and easy in terms of diagnostics.

Below you can find the list of sources which contain the most popular
errors and warning messages in R. It can be useful to familiarize
yourself with them and even try to replicate. some by yourself. However,
it would be really hard to learn every error message so that non of them
would come to you as a surprise. The good thing is that you don't really
need to. R is the most popular programming language for statistics which
has a great community. On such open platforms as Stack Overflow, you may
find the errors and problems you faced being already discussed. We have
several pieces of advice regarding this. First, you can copy and paste
the keywords from your error message directly to Google or another
search engine. Second, better use the English language rather than your
native language to search for solutions to the problems you face,
because you would find much more information available. Also, never
hesitate to contact us on Slack. Each error and warning is a good
possibility to learn something about using R properly, so it is not a
time loss when you search for potential problems and solutions.

Sources which contain the most popular errors and warnings:

Handling Errors & Warnings in R \| List of Typical Messages & How to
Solve: [Statistics Globe](https://statisticsglobe.com/errors-warnings-r)

Common Errors in R, Chapter 46: [Community
Contribution](https://jtr13.github.io/cc21/common-errors-in-r.html)

Where to go if you have a problem:

[Stack Overflow](https://stackoverflow.com/)

[R-bloggers](https://www.r-bloggers.com/2021/07/make-error-messages-your-own/)

[RDocumentation](https://www.rdocumentation.org/)
