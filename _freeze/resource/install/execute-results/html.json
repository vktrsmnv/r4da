{
  "hash": "ea0489b9954188417a117f62348a9d00",
  "result": {
    "markdown": "---\ntitle: \"Installing R, RStudio, git, and Connecting to GitHub\"\n---\n\nIn this course, we will use the open-source software `R` and RStudio as\nwell as version control with `git` and GitHub. Here you can find the\ninstallation guidelines.\n\n### What is `R`?\n\n`R` is a free and open-source programming language designed to help you\nperform data-related tasks, such as wrangling, statistical analysis,\nvisualization, and many more things (this website and pretty much all of\nthe material for this class was created wit R). `R` is getting more\npopular and knowledge of `R` will help you in the job market. Think of\nit as a very powerful engine in a car.\n\n### What is RStudio?\n\nWe will communicate with R via RStudio, a so-called integrated\ndevelopment environment. This means, we will never be opening `R`\ndirectly, but rather only work in this program. RStudio is a very\nwell-maintained commercial product, but the free version that we will be\nusing, Rstudio Desktop, has more than enough features to make working\nwith `R` more user-friendly. Think of it as a dashboard, which we will\nbe using to communicate with the engine, `R`. Note that RStudio is not a\nrequirement for programming with R, although it's very commonly used.\n\n![](/files/img/prepare/r_vs_rstudio_1.png)\n\n### What are `git` and GitHub?\n\nGit is a version control system that makes it easy to track changes and\nwork on code collaboratively. `git` is a software you run locally on\nyour computer. Version control allows you to store versions of your\nproject as you progress, so you can come back to any version of the\nproject, and accompany everything with human readable messages.\n\nWith git, writing code for a project will look somewhat like this:\n\n![](/files/img/prepare/lego-steps-commit-messages.png)\n\nGitHub is a hosting service for `git`. You can think of it as a Dropbox\nfor code (but much better). It contains projects, which we call\n*repositories* or *repos*, and these repos can be public or private.\nThis is a tool I will use to distribute code and homework assignments to\nyou and collect them. And you will use it to keep track of your code and\ncollaborate in teams. Github has a nice integration with Rstudio, so\nusing this tool will minimize the amount of work you will need to do.\n\nWe will have a course organization on Github (like a course page on\nILIAS), so your workflow will look something like this. We will go over\nit in class.\n\n![](/files/img/prepare/github-workflow-04.png)\n\n### 1. Install `R`\n\n::: panel-tabset\n#### <i class=\"fab fa-windows\"></i> Windows users\n\n1.  Open your browser and go to <https://cran.rstudio.com>.\n\n2.  Click on *Download R for Windows* and select *base*. This is the\n    version you want when you are installing `R` for the first time,\n\n3.  Click on *Download R-4.2.2 for Windows*.\n\n4.  Run the installation from the `.exe` file you just downloaded.\n\n5.  Now that `R` is installed, proceed to installing RStudio.\n\n#### <i class=\"fab fa-apple\"></i> macOS users\n\n1.  Open your browser and go to <https://cran.rstudio.com>.\n\n2.  Check whether your Mac has an Intel-based processor or an M1 (or\n    higher). You can find this info under <i class=\"fab fa-apple\"></i>\n    \\> About This Mac \\> Overview \\> Processor.\n\n![](https://images.macworld.co.uk/cmsdata/features/3594298/mac_model_serial_apple_logo.jpg)\n\n3.  Click on *Download R for macOS* and scroll down to the respective\n    `.pkg` file in the list of files and download it.\n\n4.  Run the installation from the `.pkg` file you just downloaded.\n\n5.  Download and install XQuartz: https://www.xquartz.org/.\n\n6.  Now that `R` is installed, proceed to installing RStudio.\n:::\n\n### 2. Install RStudio\n\n1.  Go to <https://posit.co/> and click on the *Download RStudio* button\n    on the top bar.\n2.  Scroll down and click on the *Download* button for the free RStudio\n    Desktop version.\n3.  Since we've already completed Step 1: Install R, move to Step 2 and\n    download the latest version of Rstudio Desktop for your operating\n    system.\n4.  Run the installer. Click *yes* through all the prompts to install\n    like any other program.\n\n### 3. Install `git`\n\n::: panel-tabset\n#### <i class=\"fab fa-windows\"></i> Windows users\n\n1.  Go to <https://git-scm.com/downloads> and click on your operating\n    system.\n2.  Download the latest release (at the time of writing, it is 2.39.0).\n    Follow the instructions and install git.\n    -   When asked about \"Adjusting your PATH environment\", make sure to\n        select *\"Git from the command line and also from 3rd-party\n        software\"*.\n\n#### <i class=\"fab fa-apple\"></i> macOS users\n\n**Recommended option**: *Install the Xcode command line tools (not all\nof Xcode), which includes Git*. This requires you opening Terminal on\nyour Mac, i.e. we will install stuff by typing what to do rather than\nclicking on the buttons in programs. Don't get intimidated, it's easier\nthan you think.\n\n1.  Go to the Terminal and type these commands to elicit an offer to\n    install developer command line tools:\n\n<!-- -->\n\n\n```{verbatim}\ngit --version\ngit config\n```\n\n\n\n\n2.  Accept the offer. Click on \"Install\".\n\n**Alternative approach** (no command line required).\n\n1.  Go to <https://git-scm.com/downloads> and click on your operating\n    system.\n2.  Download the latest release (at the time of writing, it is 2.39.0).\n    Follow the instructions and install git.\n    -   When asked about \"Adjusting your PATH environment\", make sure to\n        select *\"Git from the command line and also from 3rd-party\n        software\"*.\n:::\n\n### 4. Check that `git` was installed properly\n\nTo make sure that you did everything right and you're all set, do this:\n\n1.  Open RStudio. The icons look similar, you need the right one:\n    ![](/files/img/prepare/r_vs_rstudio_2.png){width=\"2in\"}\n\n2.  Go to lower left part of the window and click on *Terminal*.\n    ![](/files/img/prepare/Rstudio_overview.png){width=\"100%\"\n    fig-align=\"center\"}\n\n3.  Type `git` in the Terminal. You should see something like this:\n    ![](/files/img/prepare/git-in-terminal.gif){width=\"100%\"\n    fig-align=\"center\"} If you are typing in the *Console* pane instead\n    of *Terminal*, you will see this error. Make sure to switch to\n    *Terminal*.\\\n    ![](/files/img/prepare/git-in-console.svg){width=\"60%\"\n    fig-align=\"center\"}\n\n### 5. Get a GitHub account\n\n1.  Go to <https://github.com/> and create an account.\n2.  Use your `ILIAS-login` as a username. Better use your university\n    email, too.\n\n### 6. Connect `git` to your Github account\n\nWe have installed everything we need to know and you have created a\nGitHub account. However, we still have not connected your Git and GitHub\njust yet. To interact with GitHub via Rstudio, you need to authenticate\nyourself, which means you need to prove you are the owner of your GitHub\naccount. When you log in to GitHub from your browser, you provide your\nusername and password to prove your identity. Here is what you need to\ndo to authenticate yourself inside Rstudio:\n\n#### 1. Authenticate yourself to `git` on your computer.\n\nMake sure to **use the email associated with your GitHub account**. Type\nthe following in the *Console* pane in Rstudio:\n\n``` r\ninstall.packages(\"usethis\")\n\nusethis::use_git_config(user.name = \"GitHub username\", user.email = \"Email associated with your GitHub account\")\n```\n\nFor example, I would type:\n\n``` r\ninstall.packages(\"usethis\")\n\nusethis::use_git_config(user.name = \"vktrsmnv\", user.email = \"semenova@uni-mannheim.de\")\n```\n\n#### 2. Generate a **personal access token (PAT)**.\n\nNow you will essentially create a long password which you won't need to\nre-enter when working with R.\n\nType the following in the *Console* pane in Rstudio:\n\n``` r\nusethis::create_github_token()\n```\n\nThis will open a new page on Github in your browser, where you'll need\nto select the validity period of your PAT - Expiration - (I usually do\n90 days), and click on **Generate Token** at the bottom of the page.\n\nNext page will give you the PAT. It will be a long string and will look\nsomething like this: `ghp_Kt33T3rXI1m4a9vxpBU0ngRU0`. Don't close this\npage yet! You'll need this sequence, so copy it.\n\n#### 3. Save PAT in R.\n\nNow that you have the PAT, you need to tell it to R. Here we will need\nto install another package, which will do all the work for us.\n\nType the following in the *Console* pane:\n\n``` r\ninstall.packages(\"credentials\")\n\ncredentials::set_github_pat()\n```\n\nRespond to the prompt with your personal access token (PAT).\n\nIf successful, your initial (and subsequent) calls will look like this:\n\n``` r\nset_github_pat()\n\n# If prompted for GitHub credentials, enter your PAT in the password field\n# Using GITHUB_PAT from Viktoriia Semenova (credential helper: manager-core)\n```\n\nIf for whatever reason this approach does not work, try another package\n[`gitcreds`](https://r-lib.github.io/gitcreds/).\n\nType the following in the *Console* pane:\n\n``` r\ninstall.packages(\"gitcreds\")\n\ngitcreds::gitcreds_set()\n```\n\nHere you will need to enter your PAT directly in the *Console*. The\noutput should look like this.\n\n``` r\n> gitcreds::gitcreds_set()\n\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-> Adding new credentials...\n-> Removing credentials from cache...\n-> Done.\n```\n\n## Cloud Version of RStudio\n\nR is free, but it can sometimes be a pain to install and configure. To\nmake life easier, you can use the free\n[RStudio.cloud](http://posit.cloud/) service, which lets you run a full\ninstance of RStudio in your web browser. This means you won't have to\ninstall anything on your computer to get started with R! The free\nversion of the Cloud, however, comes with limitations of project working\ntime, so I do not recommend it as a default choice. It will, however,\nsuffice if you want to follow along in class but want to work from your\ntablet rather than a laptop or may be helpful if something is not\ncompiling on the local machine.\n\nTo use the cloud version, here is what you need to do:\n\n1.  Make sure you have a GitHub account.\n\n2.  Open Posit Cloud\n\n2.1 The easiest way to do it is to go to the website of the course and\nfind the cloud icon at the header of the page:\n\n![](/files/img/prepare/cloud/findcloud.png){width=\"200%\"\nfig-align=\"center\"}\n\n2.2 Or go directly to [http://posit.cloud/](http://posit.cloud/){.uri\nstyle=\"font-size: 11pt;\"}\n\n3.  Press *Get started*, at the next page press *Sign Up* button. There\n    is not need to change anything here.\n\n![](/files/img/prepare/cloud/signup.png){width=\"100%\"\nfig-align=\"center\"}\n\n4.  Choose *Sign Up with GitHub* as a Sign Up option\n\n![](/files/img/prepare/cloud/Github.png){width=\"100%\"\nfig-align=\"center\"}\n\n5.  For the first time, you have to Sign in to Github with your\n    Username(or email) and Password\n\n![](/files/img/prepare/cloud/gitdata.png){width=\"100%\"\nfig-align=\"center\"}\n\n6.  Github might ask you for a verification. Check your email connected\n    to Github to find authentication code.\n\n![](/files/img/prepare/cloud/verification.png){width=\"100%\"\nfig-align=\"center\"}\n\nCongratulations! You now have your Posit Cloud! Still, you have some\nsteps to do to make use of it.\n\n7.  In *Your Workspace*, click your name on the upper right corner and\n    select *Authentication*\n\n    ![](/files/img/prepare/cloud/autentification.png){width=\"100%\"\n    fig-align=\"center\"}\n\n8.  Here the check box *Enabled* next to the Github must be already\n    ticked.We want the same to happen with the check box *Private repo\n    access also enabled*.\n\n![](/files/img/prepare/cloud/boxes2.png){width=\"100%\"\nfig-align=\"center\"}\n\n9.  Here you may find if organizational access is provided to you. If\n    not, you can request it. After that, click *Authorize rstudio*. Now\n    both check boxes next to Github from the previous step must be\n    ticked.\n\n    ![](/files/img/prepare/cloud/provided.png){width=\"100%\"\n    fig-align=\"center\"}\n\n10. Now you can use Posit Cloud. In *Your Workspace*, find *New Project*\n    button on the upper right corner. You can both create New R Project\n    and New Project from Git Repository. For the last option, click \"New\n    Project from Git Repository\" and copy paste the link for needed\n    repository from Github.\n\nWelcome! This is a basic RStudio view but in your Posit Cloud!\n\n![](/files/img/prepare/cloud/basicview.png){width=\"100%\"\nfig-align=\"center\"}\n\n<!-- ### Install `tinytex` -->\n\n<!-- When you knit to PDF, R uses a special scientific typesetting program named LaTeX (pronounced \"lay-tek\" or \"lah-tex\"; for goofy nerdy reasons, the x is technically the \"ch\" sound in \"Bach\", but most people just say it as \"k\"—saying \"layteks\" is frowned on for whatever reason). -->\n\n<!-- LaTeX is neat and makes pretty documents, but it's a huge program—[the macOS version, for instance, is nearly 4 GB](https://tug.org/mactex/mactex-download.html)! To make life easier, there's [an R package named **tinytex**](https://yihui.org/tinytex/) that installs a minimal LaTeX program and that automatically deals with differences between macOS and Windows. -->\n\n<!-- Here's how to install **tinytex** so you can knit to pretty PDFs: -->\n\n<!-- 1. Use the Packages in panel in RStudio to install **tinytex** like you did above with **tidyverse**. Alternatively, run `install.packages(\"tinytex\")` in the console. -->\n\n<!-- 2. Run `tinytex::install_tinytex()` in the console. -->\n\n<!-- 3. Wait for a bit while R downloads and installs everything you need. -->\n\n<!-- 4. The end! You should now be able to knit to PDF. -->\n\n",
    "supporting": [
      "install_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}