{
  "hash": "f1ee40f08bf5916edd44165080195cfe",
  "result": {
    "markdown": "---\ntitle: \"Problem Set 1\"\ndate: \"2023-02-20\"\n---\n\n\n\n\n\nThis homework helps you with establishing the workflow with GitHub and Rstudio, as well as guides you through the first steps in working with Quarto documents and writing code with `R`. The guideline is rather detailed, but should you have any further questions or issues, do not hesitate to ask for help at the [Discussion forum](https://github.com/orgs/r4da-s23/discussions) or during the [office hours](https://calendly.com/vktrsmnv). \n\n## Task 1: Install the software \n\nIf you haven't done so, please install the software following the guidelines [on this page](resources/install.html). Do this as soon as you have the chance, ideally before Friday so you can come to the office hours if you need help. \n\n\n## Task 2: Load your first homework repo \n\nYou will be working on homework assignments in *private* repositories, which means only you and I have access to the files. Each homework repo will include your GitHub/ILIAS login in the title. You should be able to load this repo into your local machine, make changes to the files there, and have access to uploading things back to GitHub so I can see and grade them.\n\n\n\n#### Get the URL of the repo for homework assignment\n\nGo to the page of our [course organization on GitHub](https://github.com/orgs/r4da-s23) and open the repository `01-problem-set-[username]`. This repo contains all the relevant materials for your first homework assignment. \n\nClick on the green Code button and copy the HTTPS link for the repo by clicking on the clipboard icon. \n\n![](../files/img/assignments/github-code-url.png)\n<!-- To work on the assignment, you have open the repository as a new project in RStudio on your computer.  -->\n\n#### Import the repository in RStudio\n\nOpen RStudio and select `File` > `New Project` > `Version Control` > `Git`. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../files/img/assignments/new-project.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nIn the final window, paste the repo URL you grabbed from GitHub in the `Repository URL` window. \nClick on `Browse` to select the folder on your computer where you want to store the project. I suggest you set up a folder on your computer for all the class content and always use this as a destination to store your material for the course. \n\nClick on `Create Project`. \n\nIf everything worked fine, you should now have a subfolder `01-problem-set-[username]` in the folder our selected when cloning the project. \n\n## Task 3: Practice committing to the repo\n\nBefore we move to `R`, let's try uploading files into GitHub. The process here requires two steps: first, you need to, figuratively, take a snapshot of your project looks like at the moment. This is what a `commit` command will do. And after that, you will need to upload your changes to GitHub (otherwise, they just stay on your local machine). This is done with the help of `push` command. \n\n#### Make some changes \n\nYour first commit will be adding the dataset into the repo: \n\n- Create a subfolder named `data` in the project folder you just made. \n- Download this `csv` file and place it in that folder:\n\n    - [{{< fa file-csv >}} `trains.csv`](/files/data/external_data/trains.csv)\n    \n    \nNow you are ready to make your first commit! Here are the steps you need to follow: \n\n#### Upload the assignment to GitHub\n\n1. Click on `Git` in the environment pane on the upper right.\n\n2. Check all boxes that appear in the upper left pane. By doing so, you are telling `git` to take a snapshot of all the files you've made changes to. \n\n3. Click on `Commit`.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../files/img/assignments/commit-select-files.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n4. Write a _Commit Message_ in the upper right window. **For this task, please use _\"Added data folder and dataset\"_ as your commit message**. Usually, this should describe the work you did since your last commit so that at a later point in time, you can easily keep track of your process. \n\n5. Click on `Commit`.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../files/img/assignments/commit-add-message.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n\n  \n\n6. If everything worked fine, you should see something similar in a dialog window. This means that you have successfully svaed your work _on your computer_.  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../files/img/assignments/commit-success.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n7. You can now see that there are commits that have not been uploaded to GitHub thanks to the message on the left. Click on `Push` in order to push the latest saved version to GitHub. \n  \n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../files/img/assignments/commit-push.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n8. If everything goes well, you will something resembling this message in a dialog window. You've done with the first commit ðŸŽ‰\n\n  \n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../files/img/assignments/commit-push-success.png){fig-align='center' width=50%}\n:::\n:::\n\n\n  \nNow you can go to the repository on GitHub and check whether it is updated to the most current version of your assignment.\n\nIn a few minutes after you pushed, if you have done everything right, you will see the badge \"Data folder commit\" in the `README.md` (aka description) part in your repository turning green.[^actions] \n\n\n[^actions]: If you think you did everything right (which means you see `data` folder on GitHub) but the badge is red--don't worry! \n\n\n## Task 4: Try working with Quarto document \n\n\nNow let's move to the fun part--working in Quarto and writing the `R` code. \n\nOpen the file `01-problem-set.qmd`. This is the file that allows you to both write the code and the text, so you can produce well-formatted reports. \n\nThe top part of the file is called `YAML`. It contains the main information about the project. \n\n1. Update your first and last name in the YAML. Try `knit`-ing the file now--this will produce an HTML file with your name (and the rest of the content). \n\nAfter that, let's try writing some code. The code in Quarto documents goes into *chunks*. The very first chunk you have in the document is usually called `setup` and it contains all of the preparatory things, such as packages you need to load or other related things. \n\nLet's start by loading the dataset you downloaded and put into `data` folder into `R`. You will work with a `csv` file, which is not a native `R` file. This means we need a package to work with it. If you remember from the session, we will be using `readr` package for this purpose.\n\n2. Check that `readr` is being installed with `install.packages` and loaded with `library` command in the `setup` chunk. If it is not, add the code to do this. \n\n3. Load the dataset. To do that, you need to specify the path to the data file relative to the project directory. If the data were right in the project folder, you would write just the name of the dataset. But since we put the data in the subfolder, you need to include it into the path: `data/cars.csv`. \n\n4. Inspect the dataset. \n\n5. Create a new column in the dataset. \n\n6. Generate the plot. Copy and paste this code into the respective chunk and run the chunk. \nExplain what you see on the plot in 2-3 sentences. \nWriting accompanying text is easiest if you are using the Visual editor in RStudio. The interface resembles the one you have in programs like Microsoft Word, so it is quite intuitive to format the text nicely. \n\nTip: you can use comments inside the code chunks to incorporate notes. Better use the comments for small code-related notes and write descriptions and answer to questions using the regular text option. \n\n7. Knit the file to PDF. \nNow let's try knitting to PDF rather than HTML. This way, you can share the reports files much easier. \n\n8. Save the `qmd` file. Do not change the name of the file.\n\n\n\n## Task 5: Commit and push the final result version to GitHub\n\nYou're almost done with the first homework! Now all that's left is uploading the task back to GitHub. Essentially, you need to repeat the steps from before:\n\n\n1. Click on `Git` in the environment pane on the upper right.\n\n2. Check all boxes that appear in the upper left pane. By doing so, you are telling `git` to take a snapshot of all the files you've made changes to. \n\n3. Click on `Commit`.\n\n4. Write a _Commit Message_ in the upper right window. **For this task, please use _\"Added data folder and dataset\"_ as your commit message**. Usually, this should describe the work you did since your last commit so that at a later point in time, you can easily keep track of your process. \n\n5. Click on `Commit`.\n\n6. If everything worked fine, you should see something similar in a dialog window. This means that you have successfully svaed your work _on your computer_.  \n\n7. You can now see that there are commits that have not been uploaded to GitHub thanks to the message on the left. Click on `Push` in order to push the latest saved version to GitHub. \n  \n8. If everything goes well, you will something resembling this message in a dialog window. \n\nCongrats! You are done with the first homework assignment!  ðŸŽ‰\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}