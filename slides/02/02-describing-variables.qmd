---
title: "Describing Variables"
subtitle: "Data Analytics and Visualization with R<br>Session 2"
title-slide-attributes:
  data-background-size: stretch
  data-slide-number: none
auto-stretch: false
institute: "University of Mannheim<br>Spring 2023"
author: "Viktoriia Semenova"
footer: "[ðŸ”— r4da.live](https://r4da.live/)"
logo: images/logo.png
format:
  revealjs:
    theme: ../slides.scss
    transition: fade
    incremental: true   
    slide-number: true
    chalkboard: true
editor: visual
execute:
  echo: true
---

```{r, include=FALSE}

un_votes <- readr::read_csv("https://r4da.live/files/data/external_data/un_votes.csv")
p_needed <- c("tidyverse", "scico", "icons") 

# check if they are already installed, install if not installed 
lapply(p_needed[!(p_needed %in% rownames(installed.packages()))], install.packages)

# load the packages
lapply(p_needed, library, character.only = TRUE)
```

# Warm up

## Announcements

::: incremental
-   Our Slack workspace: [r4da.slack.com](r4da.slack.com)
    -   `#github_lab_updates`: notifies you on push to lab repos
    -   `#github_discussions_updates`: notifies you on new posts in Discussions
    -   you can create private channels for teamwork
:::

## Naming Conventions

-   Avoid spaces and special characters (e.g., umlauts) in folder/file names. Use:
    -   `snake_case`
    -   `camelCase`
    -   `PascalCase`
-   Same applies to creating variables in `R`:

```{r, eval=FALSE}
# good 
un_votes$percent_yes

# bad
un_votes$`percent yes`
```

## `tidyverse` package is a shortcut

::: columns
::: {.column width="50%"}
```{r eval=FALSE}
install.packages("tidyverse")
```

```         
install.packages("ggplot2")
install.packages("dplyr")
install.packages("tidyr")
install.packages("readr")
install.packages("purrr")
install.packages("tibble")
install.packages("stringr")
install.packages("forcats")
install.packages("lubridate")
install.packages("hms")
install.packages("DBI")
install.packages("haven")
install.packages("httr")
install.packages("jsonlite")
install.packages("readxl")
install.packages("rvest")
install.packages("xml2")
install.packages("modelr")
install.packages("broom")
```
:::

::: {.column width="50%"}
```{r eval=FALSE}
library("tidyverse")
```

```         
library("ggplot2")
library("dplyr")
library("tidyr")
library("readr")
library("purrr")
library("tibble")
library("stringr")
library("forcats")
```
:::
:::

<!-- ```{=html} -->

<!-- <iframe src="https://app.sli.do/event/adq3BNjH86taZN3zc38iXV/embed/polls/5064438a-953b-4fdb-bc5c-c7b72fa1addf" width="1000" height="400"></iframe> -->

<!-- ``` -->

## Installing and loading new packages

```{r, results='hide', message=FALSE, warning=FALSE}
# put all packages we use in a vector
p_needed <- c("tidyverse", "scico") 

# check if they are already installed, install if not installed 
lapply(p_needed[!(p_needed %in% rownames(installed.packages()))], install.packages)

# load the packages
lapply(p_needed, library, character.only = TRUE)
```

## Loading Dataset

-   Use relative paths in `qmd` files
-   Use `Tab` for auto-complete when writing paths
-   Always put *all* the code lines in the `qmd` file
-   If you use *Import Dataset* tool in Rstudio:
    -   Load the dataset
    -   Copy the path absolute path from *Console*
    -   Shorten the absolute path to a relative one and paste into `qmd` file
-   Do **not** leave full datasets printed out it chunks

## Information about Dataset

How many and what columns does it contain? How many observations are there?

```{r}
glimpse(un_votes)
```

. . .

How **many** unique countries are there in the dataset?

```{r}
un_votes$country %>% unique() %>% length()
```

## GitHub

::: incremental
-   GitHub commit messages are *primarily* for you, not for me
-   File status: ![](https://intro2r.com/images/rstudio_git_cols.png)
-   What's coming later on:
    -   use `git` & GitHub to collaborate (aka deal with merge conflicts)
    -   travel in time (go between versions of the project)
    -   create and populate R project and repos on your own
:::

## Your GitHub Stats ðŸ¤“

::: columns
::: {.column width="50%"}
![](images/PS01_by_hour.png)
:::

::: {.column width="50%"}
![](images/PS01_by_wday.png)
:::
:::

## Using pipes `%>%` or `|>`

```{r, eval=FALSE}
leave_house(
  get_dressed(
    get_out_of_bed(wake_up(me, time = "8:00"),
                   side = "correct"),
    pants = TRUE,
    shirt = TRUE
  ),
  foot = TRUE,
  bike = FALSE
)
```

. . .

With pipes:

```{r, eval=FALSE}
me %>%
  wake_up(time = "7:00") %>%
  get_out_of_bed(side = "correct") %>%
  get_dressed(pants = TRUE, shirt = TRUE) %>%
  leave_house(foot = TRUE, bike = FALSE)
```

# Describing Variables

## Types of Data in Political Science

-   **Cross-section:** a snapshot of a sample of units (e.g., people, countries, governments) at one point of time

-   **Time series:** observations on variables over time

-   **Pooled time series cross-section:** comparable time series data observed on variety of units (e.g., people, countries, governments)

    -   Usually few cases, but long time series

-   **Panel data:** large number of the same cross-sectional units (e.g., survey respondents) observed repeatedly

    -   Usually many cases, but shorter time series

------------------------------------------------------------------------

## ![](https://openintro-ims.netlify.app/01-data-hello_files/figure-html/variables-1.png)

## Types of Variables

-   **Numerical (quantitative):** take on values sensible to add, subtract, take averages, etc. with these values
    -   *Continuous:* take on any of an infinite number of values within a given range (e.g., vote share) `r icons::fontawesome("r-project")` `numeric`
    -   *Discrete:* take on one of a specific set of numeric values (e.g., number of human fatalities in conflict) `r icons::fontawesome("r-project")` `integer`
-   **Categorical (qualitative):** take on a limited number of distinct categories categories can be identified with numbers, but not sensible to do arithmetic operations `r icons::fontawesome("r-project")` `character` or `factor`
    -   *Ordinal:* levels have an inherent ordering (e.g., Likert scales)
    -   *Nominal:* levels have no inherent ordering (e.g., party choice: CDU, SPD, Greens, etc.)

> Data types are conceptual

## **Number of variables involved**

-   Univariate data analysis - distribution of single variable

-   Bivariate data analysis - relationship between two variables

-   Multivariate data analysis - relationship between many variables at once, usually focusing on the relationship between two while conditioning for others

## Describing shapes of numerical distributions

-   shape:
    -   skewness: right-skewed, left-skewed, symmetric (skew is to the side of the longer tail)
    -   modality: unimodal, bimodal, multimodal, uniform
-   center: mean (`mean`), median (`median`), mode (not always useful)
-   spread: range (`range`), standard deviation (`sd`), inter-quartile range (IQR)
-   unusual observations

## Central Tendency: Mean

<!-- ::: columns -->

<!-- ::: {.column width="50%"} -->

**Mean:** arithmetic average, the "typical" value, the best guess about the value drawn from the distribution

$$\bar{x} = \frac{x_1 + x_2 + x_3 + ... + x_N}{N} = \frac{\sum_{i=1}^{N}x_i}{N}$$

```{r}
mean(x = un_votes$percent_yes)

sum(un_votes$percent_yes) / length(un_votes$percent_yes)
```

## Central Tendency: Median

**Median:** value of $x$ that falls in the middle position when observations are ordered ascending

$$\widetilde{x} =\begin{cases}
  x_\frac{N+1}{2}                                    & \text{if }N\text{ is odd}\\
  \frac {1}{2}\left(x_{\frac{N}{2}} + x_{\frac{N}{2} + 1}\right) & \text{if }N \text{ is even}
\end{cases}$$ <!-- :::  --> <!-- ::: {.column width="50%"} -->

```{r}
median(x = un_votes$percent_yes)
summary(un_votes$percent_yes)
```

<!-- :::  -->

<!-- :::  -->

## Problems with Single Numbers

```{r, echo=FALSE}
set.seed(1234)
animals <-
  tibble(animal = c(rep(c(
    "Small cat", "Big cat"
  ), each = 250), rep("Dog", 500))) %>%
  mutate(
    weight = case_when(
      animal == "Small cat" ~ rnorm(n(), 20, 5),
      animal == "Big cat" ~ rnorm(n(), 60, 5),
      animal == "Dog" ~ rnorm(n(), 40, 10)
    )
  ) %>%
  mutate(animal_type = ifelse(str_detect(animal, "cat"), "Cats", "Dogs"))

animals_mean <- animals %>%
  group_by(animal_type) %>%
  summarize(avg_weight = mean(weight))

animals_mean %>%
  knitr::kable(row.names = FALSE,
        col.names = c("", "Average Weight"), format = "html")

```

::: columns
::: {.column width="50%"}
```{r animal-weight-bar, echo=FALSE, fig.dim=c(4.8, 3.75), out.width="100%"}
ggplot(
  animals_mean,
  aes(x = animal_type, y = avg_weight, fill = animal_type)
) +
  geom_col() +
  labs(x = NULL, y = "Weight") +
  guides(fill = FALSE) +
  theme_bw() +
  scale_fill_manual(values = c("#c32e37", "#003056"))
```
:::

::: {.column width="50%"}
```{r animal-weight-points, echo=FALSE, fig.dim=c(4.8, 3.75), out.width="100%"}
ggplot(animals, aes(x = animal_type, y = weight, color = animal_type)) +
  geom_point(position = position_jitter(height = 0), size = 1) +
  stat_summary(
    geom = "point",
    fun = "mean",
    size = 5,
    color = "#94b166"
  ) +
  labs(x = NULL, y = "Weight") +
  guides(color = FALSE) +
  theme_bw()  +
  scale_color_manual(values = c("#c32e37", "#003056"))
```
:::
:::

## Sample Dispersion: Variance

<!-- ::: {.column width="60%"} -->

**Variance:** measure of the typical departure from the mean of a dataset

$$
s^2 = \frac{\sum_{i=1}^{N}(x_i - \bar{x})^2} {N - 1}
$$

```{r}
var(x = un_votes$percent_yes)
```

## Sample Dispersion: Standard Deviation

**Standard Deviation** $s$: measure of the typical departure from the mean of a dataset (intuitive scale)

$$
s = \sqrt{\frac{\sum_{i=1}^{N}(x_i - \bar{x})^2} {N - 1}} = \sqrt{s^2}
$$ <!-- :::  --> <!-- ::: {.column width="40%"} -->

```{r variance}
sd(x = un_votes$percent_yes)
```

<!-- :::  -->

## Quantiles and Range

::: columns
<!-- ::: {.column width="50%"} -->

-   **Range:** difference between smallest and largest value

<!-- $$range = x_{max} - x_{min}$$ -->

-   **Interquantile Range:** range of the middle 50% of the data, distance between the first quartile (25th percentile) and third quartile (75th percentile)

<!-- :::  -->

<!-- ::: {.column width="50%"} -->

```{r ranges}
range(un_votes$percent_yes)

range(un_votes$percent_yes) %>% 
  diff() 

summary(un_votes$percent_yes)

IQR(x = un_votes$percent_yes)
```

<!-- :::  -->
:::

# Grammar of graphics: `ggplot2`

## Data visualization

> *"The simple graph has brought more information to the data analyst's mind than any other device." \-\-- John Tukey*

-   Data visualization is the creation and study of the visual representation of data

-   Many tools for visualizing data \-- `R` is one of them

-   Many approaches/systems within `R` for making data visualizations \-- **ggplot2** is one of them, and that's what we're going to use

------------------------------------------------------------------------

![](images/minard.png)

## Temperature

![](https://datavizs22.classes.andrewheiss.com/slides/03-slides_files/figure-html/minard-temps-1.png)

## Causalties

![](https://datavizs22.classes.andrewheiss.com/slides/03-slides_files/figure-html/minard-deaths-1.png){width="50%"}

------------------------------------------------------------------------

## Grammar of Graphics Logic

::: columns
::: {.column width="60%"}
-   Map *data* to *aesthetics*
-   *Aesthetic*: visual property of the graph
    -   position
    -   shape
    -   color
    -   transparency
:::

::: {.column width="40%"}
![](https://m.media-amazon.com/images/I/61-YvOkZN9L.jpg){fig-align="right"}
:::
:::

## Mapping Data to Aesthetics

::: panel-tabset
### Description

| Data           | Aesthetic         | Graphic/Geometry |
|----------------|-------------------|------------------|
| Longitude      | Position (x-axis) | Point            |
| Latitude       | Position (y-axis) | Point            |
| Army size      | Size              | Path             |
| Army direction | Color             | Path             |
| Date           | Position (x-axis) | Line + text      |
| Temperature    | Position (y-axis) | Line + text      |

### Image

![](images/minard.png)
:::

## ggplot2 âˆˆ tidyverse

::: columns
::: {.column width="40%"}
![](images/ggplot2-part-of-tidyverse.png){fig-align="left"}
:::

::: {.column width="60%"}
-   **ggplot2** is tidyverse's data visualization package

-   `gg` in **ggplot2** stands for Grammar of Graphics

<!-- -   `ggplot()` is the main function -->

-   Installation:

    ``` r
    install.packages("tidyverse")
    library(ggplot2)
    ```

-   For help with ggplot2, see [ggplot2.tidyverse.org](http://ggplot2.tidyverse.org/)
:::
:::

<!-- ::: aside -->

<!-- Source: [BloggoType](http://bloggotype.blogspot.com/2016/08/holiday-notes2-grammar-of-graphics.html) -->

<!-- ::: -->

## Plotting with layers

::: columns
::: {.column width="45%"}
![](images/ggplot-layers@4x.png){fig-align="left"}
:::

::: {.column width="55%"}
```{r}
#| eval: false
ggplot(data = [dataset],
       mapping = aes(
         x = [x - variable],
         y = [y - variable]
         )
       ) +
  geom_xxx() +
  other options
```
:::
:::

<!-- ## Napoleon's Troops Data -->

<!-- ```{r minard-troops, echo=FALSE, warning=FALSE} -->

<!-- library(tidyverse) -->

<!-- # https://github.com/vincentarelbundock/Rdatasets/tree/master/csv/HistData -->

<!-- troops <- read_csv("https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/HistData/Minard.troops.csv") %>%  -->

<!--   select(longitude = long, latitude = lat, direction, survivors) -->

<!-- ``` -->

<!-- ```{r head-troops, echo=FALSE} -->

<!-- troops %>%  -->

<!--   slice(1:3) %>%  -->

<!--   mutate_all(as.character) %>%  -->

<!--   bind_rows(tibble(longitude = "â€¦", latitude = "â€¦", direction = "â€¦", survivors = "â€¦"), -->

<!--             troops %>%  -->

<!--   slice(50:51) %>%  mutate_all(as.character)) %>%  -->

<!--   knitr::kable(format = "html") -->

<!-- ``` -->

<!-- --- -->

<!-- ```{r show-basic-minard, echo=FALSE, fig.width=16, fig.height=8, out.width="100%"} -->

<!-- ggplot(data = troops, -->

<!--        mapping = aes(x = longitude, -->

<!--                      y = latitude, -->

<!--                      color = direction, -->

<!--                      size = survivors)) + -->

<!--   geom_path(lineend = "round",  -->

<!--             linejoin = "mitre") +  -->

<!--   scale_size_continuous(range = c(1, 20), -->

<!--                         labels = scales::comma) + -->

<!--   theme_gray(base_size = 20) -->

<!-- ``` -->

## Possible aesthetics

::: columns
::: {.column width="33%"}
```{r, include=FALSE}
library(tidyverse)
```

**`color` discrete**

```{r aes-color-discrete, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
eg <- tribble(
  ~x, ~y, ~size, ~x1,
  "A", 1, 5, 1,
  "B", 1, 10, 2,
  "C", 1, 15, 3
)

# Color, discrete
ggplot(eg, aes(x = x, y = y, color = x)) +
  geom_point(size = 30) +
  guides(color = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

**`color` continuous**

```{r aes-color-continuous, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Color, continuous
ggplot(eg, aes(x = x1, y = y, color = x1)) +
  geom_point(size = 30) +
  guides(color = "none") +
  coord_cartesian(xlim = c(0.5, 3.5)) +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```
:::

::: {.column width="33%"}
`size`

```{r aes-size, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Size
ggplot(eg, aes(x = x, y = y, size = x)) +
  geom_point() +
  scale_size_discrete(range = c(2, 30)) +
  guides(size = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

`fill`

```{r aes-fill, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Fill
ggplot(eg, aes(x = x, y = y, fill = x)) +
  geom_point(size = 30, pch = 21, stroke = 5) +
  guides(fill = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```
:::

::: {.column width="33%"}
`shape`

```{r aes-shape, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Shape
ggplot(eg, aes(x = x, y = y, shape = x)) +
  geom_point(size = 30) +
  guides(shape = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

`alpha`

```{r aes-alpha, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Alpha
ggplot(eg, aes(x = x, y = y, alpha = x)) +
  geom_point(size = 30) +
  guides(alpha = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```
:::
:::

## Example geoms

<br>

|                                          |                  |            |
|------------------------------------------|------------------|:----------:|
| ![](images/geom_bar.png){width="50"}     | `geom_col()`     | Bar charts |
| ![](images/geom_text.png){width="50"}    | `geom_text()`    |    Text    |
| ![](images/geom_point.png){width="50"}   | `geom_point()`   |   Points   |
| ![](images/geom_boxplot.png){width="50"} | `geom_boxplot()` |  Boxplots  |
| ![](images/geom_sf.png){width="50"}      | `geom_sf()`      |    Maps    |

## Additional layers

-   *scales* change properties of variable mapping
-   *facets* show subplots for different subsets of data
-   *coordinates* change the coordinate system
-   *labels* add labels to the plot
-   *theme* changes the appearance of anything in the plot
-   *theme options* make adjustments to existing *themes*

## Tidy data

-   For `ggplot()` to work, your data needs to be in a *tidy* format
-   This doesn't mean that it's clean, it refers to the structure of the data
-   All the packages in the *tidyverse* work best with tidy data; that why it's called that!

## Tidy means:

-   Each variable has its own column
-   Each observation has its own row
-   Each value has its own cell

![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)

## Same Data, Different Formats

::: columns
::: {.column width="50%"}
Untidy Data

![](https://datavizs22.classes.andrewheiss.com/slides/img/03/untidy-example.png)
:::

::: {.column width="50%"}
Tidy data ![](https://datavizs22.classes.andrewheiss.com/slides/img/03/tidy-example.png)
:::
:::

## Tidy is Long Data

![](https://datavizs22.classes.andrewheiss.com/slides/img/03/original-dfs-tidy.png)

## Data: US Governors

> Does political office cause worse or better longevity prospects? Two perspectives in the literature offer contradicting answers. First, increased income, social status, and political connections obtained through holding office can increase longevity. Second, increased stress and working hours associated with holding office can have detrimental effects on longevity. \<...\> The results show that politicians winning a close election live 5--10 years longer than candidates who lose.

## Data: US Governors

```{r, include=FALSE}
governors <- readr::read_csv("../data/governors.csv")
```

```{r}
glimpse(governors)
```

<!-- ## Spot the Difference -->

<!-- **Mapping vs. setting** -->

<!-- ```{r} -->

<!-- #| eval: false -->

<!-- ggplot(governors) + -->

<!--   geom_jitter(aes(x = party, y = election_age,  -->

<!--                  color = "blue")) -->

<!-- ggplot(governors) + -->

<!--   geom_jitter(aes(x = party, y = election_age),  -->

<!--                  color = "blue") -->

<!-- ``` -->

<!-- ## **Global vs. local** -->

<!-- **Any aesthetics in `ggplot()` will show up in all `geom_` layers** -->

<!-- ```{r} -->

<!-- #| eval: false -->

<!-- ggplot(governors, aes(x = party, y = election_age, color = party)) + -->

<!--   geom_boxplot() + -->

<!--   geom_jitter(alpha = 0.5)  -->

<!-- ``` -->

<!-- ``` r -->

<!-- ggplot(governors) + -->

<!--   geom_jitter(aes(x = party, y = election_age, color = party)) -->

<!-- ``` -->

<!-- **Any aesthetics in `geom_` layers only apply to that layer** -->

<!-- ```{r} -->

<!-- #| eval: false -->

<!-- ggplot(governors, aes(x = party, y = election_age)) + -->

<!--   geom_boxplot() + -->

<!--   geom_jitter(aes(color = party), alpha = 0.5)  -->

<!-- ``` -->

<!-- ## Theoretical Distributions -->

## Styling the Code: Why

```{r, eval=FALSE}
governors %>% 
  filter(election_age > 50, sex == "Male")

governors %>% filter(election_age > 50, sex == "Male")

governors %>% 
  filter(election_age > 50,
         sex == "Male")

governors %>% filter(election_age>50, sex=="Male")

filter(governors,election_age>50, sex=="Male")

governors %>% 
filter(election_age > 50, 
                            sex=="Male")

filter ( governors,election_age>   50,     sex=="Male" )
```

## Styling the Code: How

```{r, eval=FALSE}
install.packages("styler")
library(styler)
```

![](images/styler.png){width="80%"} - More on styling [on course website](https://r4da.live/resource/style.html)

<!-- ## Tables for Descriptive Statistics -->

<!-- -   `stargazer`: PDF + HTML (solid general descriptive stats tables) !refuses to work with tibbles -->

<!-- -   `skimr`: good for overall dataset description -->

<!-- -   `modelsummary`: flexible tables -->

## Saving Your Plots: Bitmaps vs Vector

::: columns
::: {.column width="50%"}
![](https://datavizs22.classes.andrewheiss.com/slides/img/02/example-bitmap.png)

-   JPEG: Photographs

-   PNG/GIF: Images with limited colors
:::

::: {.column width="50%"}
![](https://datavizs22.classes.andrewheiss.com/slides/img/02/example-vector.png)

-   PDF: Anything vector based

-   SVG: Vectors online
:::
:::

**Save your plots as PNG or SVG (Web) or PDF (Print)**

## To-Do List

-   Problem Set 2
-   Readings/videos for week 3
