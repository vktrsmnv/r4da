---
title: "Estimating Heterogeneous Effects"
subtitle: "R for Data Analysis"
title-slide-attributes:
  data-background-size: stretch
  data-slide-number: none
auto-stretch: false
institute: "University of Mannheim<br>Fall 2023"
author: "Viktoriia Semenova"
footer: "[🔗 r4da.live](https://r4da.live/)"
logo: images/logo.png
format:
  revealjs:
    theme: slides.scss
    transition: fade
    incremental: true   
    slide-number: true
    chalkboard: true
execute:
  echo: true
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 80
---

```{r setup, include=FALSE}
p_needed <- c("tidyverse", "janitor", "icons", "infer",
              "countdown", "showtext", "ggdag", "magrittr",
              "gt", "plotly", "broom", "patchwork")

# check if they are already installed, install if not installed
lapply(p_needed[!(p_needed %in% rownames(installed.packages()))], install.packages, repos = "http://cran.us.r-project.org")

# load the packages
lapply(p_needed, library, character.only = TRUE)

# set width of code output
options(width = 90)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7, # 7" width
  fig.asp = 0.618, # the golden ratio
  fig.retina = 3, # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300 # higher dpi, sharper image
)


font_add_google(name = "Gochi Hand")
showtext::showtext_auto()
# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14)) +
  theme(plot.title = element_text(face = "bold"))

# governors <- readr::read_csv("https://r4da.live/files/data/external_data/governors.csv")
# trains <- readr::read_tsv("../data/trains.tsv") %>% clean_names()
evals <- read_csv("data/beauty.csv") %>% clean_names()
set.seed(2508)
```

## Which of These Hypotheses Specify Conditional Relationsip? {.smaller}

1. Women representatives are more likely than men representatives to focus on issues of relative importance to women.
2. The stronger the partisan identification of the voter, the stronger is anger in response to threat of electoral loss.
3. For candidates that the voter has seen on posters, appearance has a stronger effect on vote choice than for candidates that the voter has not seen on posters.
4. Women are more likely to substantively represent women if they were elected in districts with larger magnitude.
5. Government parties are more likely to engage in constructive legislative review than opposition parties.

## Dataset: Student Evaluations 

```{r}
glimpse(evals)
```

## Baseline Model {.smaller}

```{r}
#| echo: false
m0 <- lm(eval ~ beauty + female + age + nonenglish, 
         data = evals)
tidy(m0, conf.int = T) %>% 
  knitr::kable(digits = 3)
```

## Baseline Model {.smaller}
```{r}
#| echo: false
#| out-width: 80%

m0_df <- augment(m0, interval = "confidence")

# create a grid for all possible combinations 
# tibble() only allows for different values in one variable 
plt <- expand_grid(
  beauty = 0:10,
  female = 0:1,
  age = mean(m0_df$age),
  minority = 0,
  nonenglish = 0
) 
# 
# predict(m0,
#         interval = "confidence",
#         newdata = plt,
#         level = 0.95) %>%
#   bind_cols(plt) %>%
#     mutate(female = if_else(female == 1, "Female", "Male")) %>%
#   ggplot(aes(beauty, y = fit, 
#              color = as_factor(female),
#              fill  = as_factor(female))) +
#   labs(
#     x = "Beauty",
#     y = "Average Teaching Evaluation",
#     title = "Relationship between Instructor Beauty and Course Evaluations",
#     subtitle = "Intercept Shift with Same Slope",
#     color = "Instructor is",
#     fill = "Instructor is"
#   ) +
#   geom_line() +
#   # geom_ribbon(aes(ymin = lwr,
#   #                 ymax = upr)) +
#   # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
#   scale_color_viridis_d(end = 0.8) +
#   scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
#   theme(legend.position = "top") +
#   scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
#   ylim(c(3.5, 4.8)) +
#   theme(panel.grid.minor = element_blank(),
#         plot.title.position = "plot")
plt <- expand_grid(
  beauty = 1:10,
  female = 0:1,
  age = mean(evals$age, na.rm = T),
  minority = 0,
  nonenglish = 0
) 
m0 <- lm(eval ~ beauty + female, data = evals)

vidata1 <- data.frame(beauty = 6, female = 0)
vidata2 <- data.frame(beauty = 7, female = 0)
gredata1<- data.frame(beauty = 3,female = 1)
gredata2<- data.frame(beauty = 4,female = 1)


predict(m0,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
    mutate(female = if_else(female == 1, "Female", "Male")) %>%
   ggplot(aes(beauty, y = fit,
             color = as_factor(female),
             fill  = as_factor(female))) +
  labs(
    x = "Beauty",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    subtitle = "Intercept Shift with Same Slope",
    color = "Instructor is",
    fill = "Instructor is"
  ) +
  annotate(
    "text",
    x = 7.25,
    y = 4.2,
    label = expression("β"[1]),
    size = 5
  ) +
  annotate(
    "point",
    x = 7,
    y = predict(m0, newdata = vidata2),
    size = 1.5,
    color = viridis::viridis(2)[1]
  ) +
  geom_segment(
    aes(
      x = 3,
      y = 3.5,
      xend = 4,
      yend = 3.5
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.15, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
  geom_segment(
    aes(
      x = 7,
      y = 3.5,
      xend = 6,
      yend = 3.5
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.15, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
  geom_segment(
    aes(
      x = 2,
      predict(m0, newdata = gredata2),
      xend = 2,
      yend =  predict(m0, newdata = gredata1)
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.1, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
  geom_segment(
    aes(
      x = 2,
      y =  predict(m0, newdata = vidata1),
      xend = 2,
      yend =  predict(m0, newdata = vidata2)
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.1, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
   # geom_segment(aes(x = 2, y =  predict(m0, newdata = vidata2), xend = 2, yend =  predict(m0, newdata = vidata1)), col = "black",
   #                arrow = arrow(length = unit(0.1, "cm"))) +
 geom_segment(aes(x= 4,xend = 4,y= 3,yend = predict(m0, newdata = gredata2)), color = "black", linetype = "dashed", size = 0.2) +
 annotate("point", x = 6, y = predict(m0, newdata = vidata1), size = 1.5, color = "darkviolet") +
 geom_segment(aes(x= 3,xend =3,y= 3,yend = predict(m0, newdata = gredata1)), color = "black", linetype = "dashed", size = 0.2) +
   geom_segment(aes(x= 6,xend =6,y= 3,yend = predict(m0, newdata = vidata1)), color = "black", linetype = "dashed", size = 0.2) +
   geom_segment(aes(x= 7,xend =7,y= 3,yend = predict(m0, newdata = vidata2)), color = "black", linetype = "dashed", size = 0.2) +
 annotate("text", x = 4.25, y = 3.8, label = expression("β"[1]), size = 5)+
 annotate("point", x = 3, y = predict(m0, newdata = gredata1), size = 1.5, color = "darkgreen") +
  annotate("point", x = 4, y = predict(m0, newdata = gredata2), size = 1.5, color = "darkgreen") +
geom_segment(aes(x= 1,xend = 7,y= predict(m0, newdata = vidata1),yend= predict(m0, newdata = vidata1)), color = "black",linetype = "dashed", size = 0.2) +
geom_segment(aes(x= 1,xend = 7,y= predict(m0, newdata = vidata2),yend= predict(m0, newdata = vidata2)), color = "black",linetype = "dashed", size = 0.2) +
geom_segment(aes(x= 1,xend = 4,y= predict(m0, newdata = gredata1),yend= predict(m0, newdata = gredata1)), color = "black",linetype = "dashed", size = 0.2) +
geom_segment(aes(x= 1,xend = 4,y= predict(m0, newdata = gredata2),yend= predict(m0, newdata = gredata2)), color = "black",linetype = "dashed", size = 0.2) +
  geom_line() +
  # geom_ribbon(aes(ymin = lwr,
  #                 ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  scale_x_continuous(limits = c(1, 10), breaks = 1:10) +
  ylim(c(3, 4.5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot")
```

## Heterogenous Effects of Beauty {.smaller}

<!-- - The effect of beauty on course evaluations differs across male and female professors: -->

```{r}
#| echo: false
m1 <- lm(eval ~ beauty * female + age +  nonenglish, data = evals)
tidy(m1, conf.int = T) %>% 
  knitr::kable(digits = 3)
```
 
## Heterogenous Effects of Beauty {.smaller}

```{r}
#| echo: false
#| out-width: 80%
plt <- expand_grid(
  beauty = 0:10,
  female = 0:1,
  age = mean(evals$age, na.rm = T),
  minority = 0,
  nonenglish = 0
) 
m0 <- lm(eval ~ beauty * female, data = evals)

vidata1 <- data.frame(beauty = 6, female = 0)
vidata2 <- data.frame(beauty = 7, female = 0)
gredata1<- data.frame(beauty = 3,female = 1)
gredata2<- data.frame(beauty = 4,female = 1)


predict(m0,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
    mutate(female = if_else(female == 1, "Female", "Male")) %>%
   ggplot(aes(beauty, y = fit,
             color = as_factor(female),
             fill  = as_factor(female))) +
  labs(
    x = "Beauty",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    subtitle = "Intercept Shift with Same Slope",
    color = "Instructor is",
    fill = "Instructor is"
  ) +
  annotate(
    "text",
    x = 8.5,
    y = 4.3,
    label = expression("β"[2] + paste("β"[3])),
    size = 5
  ) +
  annotate(
    "point",
    x = 7,
    y = predict(m0, newdata = vidata2),
    size = 1.5,
    color = viridis::viridis(2)[1]
  ) +
  geom_segment(
    aes(
      x = 3,
      y = 3.5,
      xend = 4,
      yend = 3.5
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.15, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
  geom_segment(
    aes(
      x = 7,
      y = 3.5,
      xend = 6,
      yend = 3.5
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.15, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
  geom_segment(
    aes(
      x = 2,
      predict(m0, newdata = gredata2),
      xend = 2,
      yend =  predict(m0, newdata = gredata1)
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.1, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
  geom_segment(
    aes(
      x = 2,
      y =  predict(m0, newdata = vidata1),
      xend = 2,
      yend =  predict(m0, newdata = vidata2)
    ),
    col = "black",
    arrow = arrow(
      length = unit(0.1, "cm"),
      ends = "both",
      type = "closed"
    )
  ) +
   # geom_segment(aes(x = 2, y =  predict(m0, newdata = vidata2), xend = 2, yend =  predict(m0, newdata = vidata1)), col = "black",
   #                arrow = arrow(length = unit(0.1, "cm"))) +
 geom_segment(aes(x= 4,xend = 4,y= 3,yend = predict(m0, newdata = gredata2)), color = "black", linetype = "dashed", size = 0.2) +
 annotate("point", x = 6, y = predict(m0, newdata = vidata1), size = 1.5, color = "darkviolet") +
 geom_segment(aes(x= 3,xend =3,y= 3,yend = predict(m0, newdata = gredata1)), color = "black", linetype = "dashed", size = 0.2) +
   geom_segment(aes(x= 6,xend =6,y= 3,yend = predict(m0, newdata = vidata1)), color = "black", linetype = "dashed", size = 0.2) +
   geom_segment(aes(x= 7,xend =7,y= 3,yend = predict(m0, newdata = vidata2)), color = "black", linetype = "dashed", size = 0.2) +
 annotate("text", x = 4.25, y = 3.8, label = expression("β"[2]), size = 5)+
 annotate("point", x = 3, y = predict(m0, newdata = gredata1), size = 1.5, color = "darkgreen") +
  annotate("point", x = 4, y = predict(m0, newdata = gredata2), size = 1.5, color = "darkgreen") +
geom_segment(aes(x= 1,xend = 7,y= predict(m0, newdata = vidata1),yend= predict(m0, newdata = vidata1)), color = "black",linetype = "dashed", size = 0.2) +
geom_segment(aes(x= 1,xend = 7,y= predict(m0, newdata = vidata2),yend= predict(m0, newdata = vidata2)), color = "black",linetype = "dashed", size = 0.2) +
geom_segment(aes(x= 1,xend = 4,y= predict(m0, newdata = gredata1),yend= predict(m0, newdata = gredata1)), color = "black",linetype = "dashed", size = 0.2) +
geom_segment(aes(x= 1,xend = 4,y= predict(m0, newdata = gredata2),yend= predict(m0, newdata = gredata2)), color = "black",linetype = "dashed", size = 0.2) +
  geom_line() +
  # geom_ribbon(aes(ymin = lwr,
  #                 ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
  ylim(c(3, 4.5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot")
# predict(m1,
#         interval = "confidence",
#         newdata = plt,
#         level = 0.95) %>%
#   bind_cols(plt) %>%
#     mutate(female = if_else(female == 1, "Female", "Male")) %>%
#   ggplot(aes(beauty, y = fit, 
#              color = as_factor(female),
#              fill  = as_factor(female))) +
#   labs(
#     x = "Beauty",
#     y = "Average Teaching Evaluation",
#     title = "Relationship between Instructor Beauty and Course Evaluations",
#     subtitle = "Intercept Shift with Different Slopes",
#     color = "Instructor is",
#     fill = "Instructor is"
#   ) +
#   geom_line() +
#   # geom_ribbon(aes(ymin = lwr,
#   #                 ymax = upr)) +
#   # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
#   scale_color_viridis_d(end = 0.8) +
#   scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
#   theme(legend.position = "top") +
#   scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
#   ylim(c(3, 5)) +
#   theme(panel.grid.minor = element_blank(),
#         plot.title.position = "plot")
# # m0_df <- augment(m0, interval = "confidence")

```


## Heterogenous Effects: Model Specification {.smaller}

$$
\text{Evaluation}_i = \underbrace{\hat\beta_0}_{\text{Expected evaluation}\\\text{for males if}\\\text{beauty score = 0}} + \underbrace{\hat\beta_1}_{\text{Difference in}\\\text{evaluation between}\\\text{males and females}\\\text{if beauty score = 0}} \text{Female}_i + \underbrace{\hat\beta_2}_{\text{Effect of each}\\\text{additional point}\\\text{in score for males}} \text{Beauty}_i \\ +  \underbrace{\hat\beta_3}_{\text{Difference in}\\\text{effect of beauty}\\\text{between males}\\\text{and females}} \text{Female}_i \times \text{Beauty}_i
$$

- $\text{Female}_i$ and $\text{Beauty}_i$: constitutive terms 
- $\text{Female}_i \times \text{Beauty}_i$: interaction term 
 
## Heterogenous Effects: Model Specification {.smaller}
 
We are allowing the effects of beauty to vary across the subgroups:

Marginal effect of *Beauty score*: $\hat\beta_2 +  \hat\beta_3 \times [\text{Female}_i]$

Marginal effect of *Female*: $\hat\beta_1 +  \hat\beta_3 \times [\text{Beauty}_i]$

Predicted evaluations for male instructors:

$$
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times [\text{Female}_i = 0] + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times [\text{Female}_i = 0] \times \text{Beauty}_i \\
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times 0 + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times 0 \times \text{Beauty}_i \\
\text{Evaluation}_i = {\hat\beta_0} + {\hat\beta_2} \text{Beauty}_i
$$

Predicted evaluations for female instructors:

$$
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times [\text{Female}_i = 1] + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times [\text{Female}_i = 1] \times \text{Beauty}_i \\
\text{Evaluation}_i = (\hat\beta_0 + \hat\beta_1)  + (\hat\beta_2  +  \hat\beta_3 ) \times \text{Beauty}_i 
$$

## Working with Models with Interaction Effects I {.smaller}

$$
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times \text{Female}_i  + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times \text{Female}_i \times \text{Beauty}_i \\
$$

**Include all constitutive terms**, even if you expect that a specific constitutive term alone has no effect on $Y$

- Omitting a constitutive term forces the model to set the value of the omitted coefficient to zero: e.g., if we estimated 
$\text{Evaluation}_i = \hat\beta_0 + \hat\beta_2 [\text{Beauty}_i = 1]  +  \hat\beta_3 [\text{Female}_i = 1] \times \text{Beauty}_i$ instead of the original model, we assumed the $\hat\beta_1 = 0$  
- However, $\hat\beta_1$ is not the _average_ effect of *Female* for the entire sample but it only shows the effect of *Female* if *Beauty = 0*, a subgroup of the sample. It can be the case that on average, the effect of *Female* is still zero 
- $\hat\beta_2$ captures the change in the intercepts of the regression lines between the categories of male vs. female instructors. If instead of group-specific intercept we only have one common intercept for both subgroups, the slopes may get distorted 

## Working with Models with Interactions Effects II {.smaller}

**Do not interpret the coefficients on constitutive terms as unconditional marginal effects:**

  - the coefficient on X only captures the effect of X on Y when Z is zero 
  - the coefficient on Z only captures the effect of Z on Y when X is zero

- E.g., it is **incorrect** to say that a positive and significant coefficient on $X$ (or $Z$) means that an increase in $X$ (or $Z$) is expected to lead to an increase in $Y$  

> Wrong: On average, beauty score is associated with an increase in teaching evaluations, holding all else constant. \
> Wrong: On average, female instructors receive 0.05 points more in teaching evaluations than males, holding all else constant. \
> Right: On average, beauty tends to have smaller effect on teaching evaluations among female instructors in comparison to male instructors, holding all else constant.  

-  To know the average effect of $X$ on $Y$ we would have to know how frequently condition $Z$ is present in our sample

```{r}
#| eval: false
#| echo: false
#| out-height: 50%

plt <- expand_grid(
  beauty = 0:10,
  female = 0:1,
  age = mean(evals$age, na.rm = T),
  minority = 0,
  nonenglish = 0
) 
m33 <- lm(eval ~ beauty : female + beauty, data = evals)

vidata1 <- data.frame(beauty = 6, female = 0)
vidata2 <- data.frame(beauty = 7, female = 0)
gredata1<- data.frame(beauty = 3,female = 1)
gredata2<- data.frame(beauty = 4,female = 1)

predict(m0,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
    bind_cols(plt) %>%
    mutate(female = if_else(female == 1, "Female", "Male")) %>%
    ggplot(aes(beauty, y = fit,
               color = as_factor(female),
               fill  = as_factor(female))) +
    labs(
        x = "Beauty",
        y = "Average Teaching Evaluation",
        title = "Relationship between Instructor Beauty and Course Evaluations",
        subtitle = "Intercept Shift with Same Slope",
        color = "Instructor is",
        fill = "Instructor is"
    ) +
  geom_line()

ttt <- predict(m33,
  interval = "confidence",
  newdata = plt,
  level = 0.95
) %>%
  bind_cols(plt) %>%
  mutate(female = if_else(female == 1, "Female", "Male"),
         underspecified = "Underspecified") 

ttt <- predict(m0,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
    bind_cols(plt) %>%
    mutate(female = if_else(female == 1, "Female", "Male"),
         underspecified = "Full") %>% 
  bind_rows(ttt)

ttt %>%
  ggplot(aes(beauty,
    y = fit,
    color = as_factor(female),
    linetype = as_factor(underspecified)
  )) +
  labs(
    x = "Beauty",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    subtitle = "No Intercept Shift with Same Slope",
    color = "Instructor is",
    linetype = "Model"
  ) +
  # annotate(
  #   "text",
  #   x = 7.8,
  #   y = 4.3,
  #   label = expression("β"[2] + paste("β"[3])),
  #   size = 5
  # ) +
  # annotate(
  #   "point",
  #   x = 7,
  #   y = predict(m33, newdata = vidata2),
  #   size = 1.5,
  #   color = viridis::viridis(2)[1]
  # ) +
  # geom_segment(
  #   aes(
  #     x = 3,
  #     y = 3.5,
  #     xend = 4,
  #     yend = 3.5
  #   ),
  #   col = "black",
  #   arrow = arrow(
  #     length = unit(0.15, "cm"),
  #     ends = "both",
  #     type = "closed"
  #   )
  # ) +
  # geom_segment(
  #   aes(
  #     x = 7,
  #     y = 3.5,
  #     xend = 6,
  #     yend = 3.5
  #   ),
  #   col = "black",
  #   arrow = arrow(
  #     length = unit(0.15, "cm"),
  #     ends = "both",
  #     type = "closed"
  #   )
  # ) +
  # geom_segment(
  #   aes(
  #     x = 4,
  #     predict(m33, newdata = gredata2),
  #     xend = 4,
  #     yend = predict(m33, newdata = gredata1)
  #   ),
  #   col = "black",
  #   arrow = arrow(
  #     length = unit(0.1, "cm"),
  #     ends = "both",
  #     type = "closed"
  #   )
  # ) +
  # geom_segment(
  #   aes(
  #     x = 7,
  #     y = predict(m33, newdata = vidata1),
  #     xend = 7,
  #     yend = predict(m33, newdata = vidata2)
  #   ),
  #   col = "black",
  #   arrow = arrow(
  #     length = unit(0.1, "cm"),
  #     ends = "both",
  #     type = "closed"
  #   )
  # ) +
  # geom_segment(aes(x = 2, y =  predict(m0, newdata = vidata2), xend = 2, yend =  predict(m0, newdata = vidata1)), col = "black",
  #                arrow = arrow(length = unit(0.1, "cm"))) +
  # geom_segment(aes(x = 4, xend = 4, y = 3, yend = predict(m33, newdata = gredata2)), color = "black", linetype = "dashed", size = 0.2) +
  # annotate("point", x = 6, y = predict(m33, newdata = vidata1), size = 1.5, color = "darkviolet") +
  # geom_segment(aes(x = 3, xend = 3, y = 3, yend = predict(m33, newdata = gredata1)), color = "black", linetype = "dashed", size = 0.2) +
  # geom_segment(aes(x = 6, xend = 6, y = 3, yend = predict(m33, newdata = vidata1)), color = "black", linetype = "dashed", size = 0.2) +
  # geom_segment(aes(x = 7, xend = 7, y = 3, yend = predict(m33, newdata = vidata2)), color = "black", linetype = "dashed", size = 0.2) +
  # annotate("text", x = 4.25, y = 3.8, label = expression("β"[2]), size = 5) +
  # annotate("point", x = 3, y = predict(m33, newdata = gredata1), size = 1.5, color = "darkgreen") +
  # annotate("point", x = 4, y = predict(m33, newdata = gredata2), size = 1.5, color = "darkgreen") +
  # annotate("point", x = 0, y = 3.647301, size = 1.5, color = "darkgreen") +
  # geom_segment(aes(x = 6, xend = 7, y = predict(m33, newdata = vidata1), yend = predict(m33, newdata = vidata1)), color = "black", linetype = "dashed", size = 0.2) +
  # geom_segment(aes(x = 1, xend = 7, y = predict(m33, newdata = vidata2), yend = predict(m33, newdata = vidata2)), color = "black", linetype = "dashed", size = 0.2) +
  # geom_segment(aes(x = 3, xend = 4, y = predict(m33, newdata = gredata1), yend = predict(m33, newdata = gredata1)), color = "black", linetype = "dashed", size = 0.2) +
  # geom_segment(aes(x = 1, xend = 4, y = predict(m33, newdata = gredata2), yend = predict(m33, newdata = gredata2)), color = "black", linetype = "dashed", size = 0.2) +
  geom_line(size = 1) +
  # geom_ribbon(aes(ymin = lwr,
  #                 ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  scale_x_continuous(limits = c(0, 3), breaks = 0:3) +
  ylim(c(3.5, 4)) +
  theme(
    panel.grid.minor = element_blank(),
    plot.title.position = "plot"
  ) +
  annotate(
    "point",
    x = 0,
    y = predict(m33, newdata = data.frame(female = 0, beauty = 0)),
    size = 4,
    color = viridis::viridis(7)[4]
  ) +
  annotate(
    "point",
    x = 1,
    y = predict(m0, newdata = data.frame(female = 0, beauty = 1)),
    size = 4,
    color = viridis::viridis(7)[4]
  )
```


## Working with Models with Interactions Effects III {.smaller}

$$
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times \text{Female}_i  + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times \text{Female}_i \times \text{Beauty}_i \\
$$

**Provide a substantively meaningful description of the marginal effects**

- For linear models _without_ interactions, regression coefficients alone are the quantities of interest since the coefficients represent constant (marginal) effects of variables (i.e. the effects do not depend on values of other variables and can be straightforwardly interpreted)
- For linear models _with_ interactions, reporting only the coefficients means reporting marginal effect of $X$ when the conditioning variable $Z = 0$ 
- However, it is possible we never even observe real-world situations in which $Z = 0$ (e.g., *Beauty score* ranges from 1 to 10, hence the effect of *Female* ($\hat\beta_1$) alone does not tell us anything meaningful, as we always need to have at least $\hat\beta_1 + \hat\beta_3 \times 1$ to compare the differences even for the lowest possible value of beauty score) 
- While we can do some calculations for marginal effects based on the coefficients alone, we do not have enough information from these tables to also calculate uncertainty measures (e.g., standard errors) for these marginal effects 

## Working with Models with Interactions Effects IV {.smaller}

**Do not drop interactions based on the insignificance of the interaction term coefficient**

- Insignificant interaction term coefficient $\neq$ insignificant marginal effect of $X$ on $Y$ for substantively relevant values of the modifying variable $Z$ 

::: columns
::: {.column width="50%"}

```{r, echo=FALSE,  fig.asp = 1}
#| out-width: 80%
predict(m0,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
      mutate(female = if_else(female == 1, "Female", "Male")) %>%
  ggplot(aes(beauty, y = fit, 
             color = as_factor(female),
             fill = as_factor(female))) +
  labs(
    x = "Beauty",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    # subtitle = "Intercept Shift with Different Slopes",
    color = "Instructor is",
    fill = "Instructor is" 
    ) +
  geom_line() +
  geom_ribbon(aes(ymin = lwr,
                  ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
  ylim(c(3, 5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot") +
  geom_rug(
    data = evals %>% mutate(female = if_else(female == 1, "Female", "Male")), 
    aes(y = eval, x = beauty, color = female), 
    alpha = 0.3, 
    sides = "b",
    position = "jitter",
    length = unit(0.05, "npc")
  )
```

::: 
::: {.column width="50%"}

```{r, echo=FALSE, eval = FALSE}
modelsummary::modelsummary((m0), digits = 3, 
             estimate = "{estimate} ({std.error}){stars}",statistic = NULL,
             gof_map = "none", notes = list('* p < 0.05, ** p < 0.01, *** p < 0.001'), output = "markdown")
```

|                           | Estimate (SE)    |
|:--------------------------|:----------------:|
|Intercept ($\beta_0$)      | 3.622 (0.100)*** |
|beauty ($\beta_1$)         | 0.105 (0.022)*** |
|female ($\beta_2$)         |  0.061 (0.156)   |
|beauty × female ($\beta_3$)| -0.059 (0.033)  |

__Note:__
* p < 0.05, ** p < 0.01, *** p < 0.001

E.g., based on an insignificant $\beta_3$ we cannot say that there is no significant difference between male vs. female instructors because for certain values in beauty score, we may still observe significant differences between male and female instructors 

::: 
::: 

## Causal Interaction vs. Effect Modification {.smaller}

$$
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times \text{Female}_i  + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times \text{Female}_i \times \text{Beauty}_i \\
$$

Mathematically, interactions allow us to tell two stories: 

- the effect of *Beauty* on *Teaching Evaluations* differs between male and female instructors 
- the effect of *Gender* on *Teaching Evaluations* differs across values of beauty score  

:::task 
Interpret the interaction coefficients in line with your causal story and your selected control variables.
:::


## Alternative: Using Subsets {.smaller}

::: columns
::: {.column width="50%"}

```{r}
m3 <- lm(eval ~ beauty + age + nonenglish, 
         data = evals %>% filter(female == 1))
tidy(m3, conf.int = T, conf.level = 0.9) %>% 
  knitr::kable(digits = 3)
```

::: 
::: {.column width="50%"}

```{r}
m4 <- lm(eval ~ beauty + age + nonenglish, 
         data = evals %>% filter(female == 0))
tidy(m4, conf.int = T, conf.level = 0.9) %>% 
  knitr::kable(digits = 3)
```
::: 
::: 

- Sample size: interactions rely on more data, hence smaller uncertainty 
- Comparisons are easier across effects with one model 
- Works straightforwardly when the moderator is categorical, continuous moderators require arbitrary decisions about cutoff points 
- Best: do both to make sure your results are robust 


## Intractions with Continous Variables {.smaller}

$$
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times \text{Age}_i  + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times \text{Age}_i \times \text{Beauty}_i \\
$$

- Marginal effect of *Beauty* on *Teaching evaluation*: $\hat\beta_2  + \hat\beta_3 \times \text{Age}_i$

- Marginal effect of *Age* on *Teaching evaluation*: $\hat\beta_1  +  \hat\beta_3 \times \text{Beauty}_i$

## What is the Marginal Effect of *Beauty*?

$$
\text{Evaluation}_i = \hat\beta_0 + \hat\beta_1 \times \text{Age}_i  + \hat\beta_2 \text{Beauty}_i +  \hat\beta_3 \times \text{Age}_i \times \text{Beauty}_i \\
+ \hat\beta_4 \text{Female}_i +  \hat\beta_5 \times \text{Female}_i \times \text{Beauty}_i
$$

1. $\hat\beta_2  +  \hat\beta_3 \times \text{Age}_i$
2. $\hat\beta_2  +  \hat\beta_3 \times \text{Age}_i + \hat\beta_5 \times \text{Female}_i$
3. $\hat\beta_2  +  \hat\beta_5 \times \text{Female}_i$
4. $\hat\beta_3 \times \text{Age}_i + \hat\beta_5 \times \text{Female}_i$

## Plotting Interactions with Continuous Variables {.smaller}

```{r}
#| echo: false
m2 <- lm(eval ~ beauty * age + female  + nonenglish, data = evals)
# tidy(m2, conf.int = T, conf.level = 0.9) %>% 
#   knitr::kable(digits = 3)
```


```{r}
#| echo: false
#| out-width: 80%
plt <- expand_grid(
  beauty = 0:10,
  female = 0,
  age = quantile(evals$age, probs = c(0.1, 0.5, 0.9)),
  minority = 0,
  nonenglish = 0
) 

predict(m2,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
  ggplot(aes(beauty, y = fit, 
             color = as_factor(age),
             fill  = as_factor(age))) +
  labs(
    x = "Beauty",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    # subtitle = "Intercept Shift with Different Slopes",
    color = "Instructor's age (in years)",
    fill = "Instructor's age  (in years)"
  ) +
  geom_line() +
  # geom_ribbon(aes(ymin = lwr,
  #                 ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
  ylim(c(3, 5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot") 


```

## Plotting Interactions with Continuous Variables 

```{r}
#| layout-ncol: 2
#| echo: false
#| fig-asp: 1
#| out-width: 90%
predict(m2,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
  ggplot(aes(beauty, y = fit, 
             color = as_factor(age),
             fill  = as_factor(age))) +
  labs(
    x = "Beauty",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    # subtitle = "Intercept Shift with Different Slopes",
    color = "Instructor's age (in years)",
    fill = "Instructor's age  (in years)"
  ) +
  geom_line() +
  # geom_ribbon(aes(ymin = lwr,
  #                 ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
  ylim(c(3, 5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot") 


plt <- expand_grid(
  beauty = c(2, 4, 6, 8),
  female = 0,
  age = seq(min(evals$age, na.rm = T), max(evals$age, na.rm = T), length.out = 10),
  minority = 0,
  nonenglish = 0
) 

predict(m2,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
  ggplot(aes(age, y = fit, 
             color = as_factor(beauty),
             fill  = as_factor(beauty))) +
  labs(
    x = "Instructor's age (in years)",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    # subtitle = "Intercept Shift with Different Slopes",
    color = "Beauty Score",
    fill = "Beauty Score"
  ) +
  geom_line() +
  # geom_ribbon(aes(ymin = lwr,
  #                 ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  # scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
  ylim(c(3, 5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot") 
```

## Plotting Interactions with Continuous Variables II

```{r}
#| layout-ncol: 2
#| echo: false
#| fig-asp: 1

plt <- expand_grid(
  beauty = 0:10,
  female = 0,
  age = quantile(evals$age, probs = c(0.1, 0.5, 0.9)),
  minority = 0,
  nonenglish = 0
)

predict(m2,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
  ggplot(aes(beauty, y = fit, 
             color = as_factor(age),
             fill  = as_factor(age))) +
  labs(
    x = "Beauty",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    # subtitle = "Intercept Shift with Different Slopes",
    color = "Instructor's age (in years)",
    fill = "Instructor's age  (in years)"
  ) +
  geom_line() +
  geom_ribbon(aes(ymin = lwr,
                  ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
  ylim(c(3, 5.5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot") 


plt <- expand_grid(
  beauty = c(2, 4, 6, 8),
  female = 0,
  age = seq(min(evals$age, na.rm = T), max(evals$age, na.rm = T), length.out = 10),
  minority = 0,
  nonenglish = 0
) 

predict(m2,
        interval = "confidence",
        newdata = plt,
        level = 0.95) %>%
  bind_cols(plt) %>%
  ggplot(aes(age, y = fit, 
             color = as_factor(beauty),
             fill  = as_factor(beauty))) +
  labs(
    x = "Instructor's age (in years)",
    y = "Average Teaching Evaluation",
    title = "Relationship between Instructor Beauty and Course Evaluations",
    # subtitle = "Intercept Shift with Different Slopes",
    color = "Beauty Score",
    fill = "Beauty Score"
  ) +
  geom_line() +
  geom_ribbon(aes(ymin = lwr,
                  ymax = upr)) +
  # geom_pointrange(aes(y = fit, ymin = lwr, ymax = upr)) + # plots the parallel lines
  scale_color_viridis_d(end = 0.8) +
  scale_fill_viridis_d(end = 0.8, alpha = 0.5) +
  theme(legend.position = "top") +
  # scale_x_continuous(limits = c(0, 10), breaks = 0:10) +
  ylim(c(3, 5.5)) +
  theme(panel.grid.minor = element_blank(),
        plot.title.position = "plot") 
```

## References {.smaller}

Brambor, Thomas, William Roberts Clark, and Matt Golder. 2006. “Understanding Interaction Models: Improving Empirical Analyses.” *Political Analysis* 14 (1). Cambridge University Press: 63–82. doi:10.1093/pan/mpi014.

Hamermesh, Daniel S., and Amy Parker. 2005. "Beauty in the classroom: Instructors’ pulchritude and putative pedagogical productivity." *Economics of Education Review* 24 (4): 369-376.

Keele, Luke, and Randolph T. Stevenson. 2021. “Causal Interaction and Effect Modification: Same Model, Different Concepts.” *Political Science Research and Methods* 9 (3). Cambridge University Press: 641–49. doi:10.1017/psrm.2020.12.


